networks:
  devnetwork:

services:
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    environment:
      - CHROME_BIN=/usr/bin/chromium
    volumes:
      # The following works but shouldn't be necessary:
      # - /Users/davidsilva/Dev/interview-prep/frontend:/app/frontend
      - ${HOST_PROJECT_PATH}/frontend:/app/frontend
      # The following *should* work, but it doesn't:
      # - ./frontend:/app/frontend
      - /app/frontend/node_modules
    image: interview-prep-frontend:latest
    ports:
      - "4200:4200"
    working_dir: /app/frontend
    command: npm run start
    depends_on:
      - backend
    networks:
      - devnetwork

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    image: interview-prep-backend:latest
    ports:
      - "3000:3000"
    environment:
      - DATABASE_URL=${DATABASE_URL}
    volumes:
      # The following works but shouldn't be necessary:
      # - /Users/davidsilva/Dev/interview-prep/backend:/app/backend
      - ${HOST_PROJECT_PATH}/backend:/app/backend
      # The following *should* work, but it doesn't:
      # - ./backend:/app/backend
      - /app/backend/node_modules
    command: npm run dev
    depends_on:
      - db
    networks:
      - devnetwork

  db:
    image: postgres:latest
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres-dev-data:/var/lib/postgresql/data # Persist data even after container is removed
    networks:
      - devnetwork

  db-test:
    image: postgres:latest
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5433:5432"
    volumes:
      - postgres-test-data:/var/lib/postgresql/data # Persist data even after container is removed
    networks:
      - devnetwork

  migrate:
    build:
      context: .
      dockerfile: backend/Dockerfile
    working_dir: /app/backend
    environment:
      - NODE_ENV=${NODE_ENV}
      - DATABASE_URL=${DATABASE_URL}
    command: sh -c "npm install && npx knex migrate:latest --knexfile=./src/knexFile.ts --env $NODE_ENV"
    depends_on:
      - db
    networks:
      - devnetwork

  frontend-tests:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    image: interview-prep-frontend-tests:latest
    working_dir: /app/frontend
    command: npm run test -- --watch=false --browsers=ChromeHeadlessNoSandbox
    networks:
      - devnetwork

  backend-tests:
    build:
      context: .
      dockerfile: backend/Dockerfile
    environment:
      - NODE_ENV=test
      - DATABASE_URL=${DATABASE_URL}
    image: interview-prep-backend-tests:latest
    working_dir: /app/backend
    depends_on:
      - db-test
    command: sh -c "npx jest --clearCache && npm run test -- --verbose"
    # command: tail -f /dev/null
    networks:
      - devnetwork

volumes:
  postgres-dev-data:
  postgres-test-data:
