name: CI

on:
  push:
    branches:
      - main
      - development
      - stage
      - production
      - workflow-test
  pull_request:
    branches:
      - main
      - development
      - stage
      - production
      - workflow-test

env:
  AWS_REGION: us-east-1

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/testdb
      PGPASSFILE: /home/runner/.pgpass

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '22'
      
      - name: Create .pgpass file
        run: |
          echo "localhost:5432:postgres:postgres:postgres" > ~/.pgpass &&
          echo "localhost:5432:testdb:postgres:postgres:postgres" >> ~/.pgpass &&
          chmod 0600 ~/.pgpass

      - name: Create test database
        run: |
          sudo apt-get install -y postgresql-client && 
          psql -h localhost -U postgres -c "CREATE DATABASE testdb;"

      - name: Install dependencies for backend
        working-directory: ./backend
        run: npm install

      - name: Run backend tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/testdb
        run: npm test

      - name: Install dependencies for frontend
        working-directory: ./frontend
        run: npm install

      - name: Run frontend tests
        working-directory: ./frontend
        run: npm test

  deploy:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '22'

      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_NAME }}
      #     aws-region: ${{ env.AWS_REGION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/development-github-actions-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies for backend
        working-directory: ./backend
        run: npm install

      # - name: Package migration files
      #   working-directory: ./backend
      #   run: ./package-migrations.sh

      # - name: Update Lambda migration function
      #   run: |
      #     aws lambda update-function-code \
      #       --function-name run-migrations \
      #       --zip-file fileb://backend/migrate-lambda/migrate-package.zip \
      #       --region ${{ env.AWS_REGION }}

      # - name: Invoke Lambda function for migrations
      #   run: |
      #     aws lambda invoke \
      #       --function-name run-migrations \
      #       --region ${{ env.AWS_REGION }} \
      #       outputfile.txt
      #   env:
      #     NODE_ENV: development
      #     DATABASE_URL: postgres://${{ secrets.DB_USERNAME }}:${{ secrets.DB_PASSWORD }}@${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}/${{ secrets.DB_NAME }}

      # - name: Run migrations
      #   working-directory: ./backend
      #   run: npm run migrate
      #   env:
      #     NODE_ENV: development
      #     DATABASE_URL: postgres://${{ secrets.DB_USERNAME }}:${{ secrets.DB_PASSWORD }}@${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}/${{ secrets.DB_NAME }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push backend Docker image
        working-directory: ./backend
        run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/interview-prep-backend:latest -f Dockerfile .
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/interview-prep-backend:latest

      - name: Build and push frontend Docker image
        working-directory: .
        run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/interview-prep-frontend:latest -f Dockerfile .
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/interview-prep-frontend:latest

      - name: Update ECS service for backend
        run: |
          aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER_NAME }} --service ${{ secrets.BACKEND_SERVICE_NAME }} --force-new-deployment

      - name: Update ECS service for frontend
        run: |
          aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER_NAME }} --service ${{ secrets.FRONTEND_SERVICE_NAME }} --force-new-deployment
